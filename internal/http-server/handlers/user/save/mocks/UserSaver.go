// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UserSaver is an autogenerated mock type for the UserSaver type
type UserSaver struct {
	mock.Mock
}

// SaveUser provides a mock function with given fields: username, password, presstimes, intervaltimes
func (_m *UserSaver) SaveUser(username string, password string, presstimes []int, intervaltimes []int) (string, error) {
	ret := _m.Called(username, password, presstimes, intervaltimes)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []int, []int) (string, error)); ok {
		return rf(username, password, presstimes, intervaltimes)
	}
	if rf, ok := ret.Get(0).(func(string, string, []int, []int) string); ok {
		r0 = rf(username, password, presstimes, intervaltimes)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, []int, []int) error); ok {
		r1 = rf(username, password, presstimes, intervaltimes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserSaver interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserSaver creates a new instance of UserSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserSaver(t mockConstructorTestingTNewUserSaver) *UserSaver {
	mock := &UserSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
